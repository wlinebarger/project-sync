apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

group = 'de.coeur'
version = '1.0-SNAPSHOT'

description = "Module to synchronise staging commercetools project data of coeur to production" +
        "existing commercetools project."

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

jar {
    archiveName = "coeur-category-sync.jar"
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'de.coeur.sync.category.CategorySyncer'
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

ext {
    commercetoolsJvmSdkVersion =  '1.24.0'
    mockitoVersion = '2.8.9'
    slf4jVersion = '1.7.25'
    jUnitVersion = '4.12'
    assertjVersion = '3.6.1'
    checkstyleVersion = '7.7'
    pmdVersion = '5.6.1'
    jacocoVersion = '0.7.9'
    findbugsVersion = '3.0.1'
    commercetoolsSyncJava='v1.0.0-M3'
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/integration-test/java'
        }
        resources.srcDir 'src/integration-test/resources'
    }
}

configurations {
    integrationTestCompile.extendsFrom compile, testCompile
    integrationTestRuntime.extendsFrom runtime, testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
    compile "com.commercetools.sdk.jvm.core:commercetools-models:${commercetoolsJvmSdkVersion}"
    compile "com.commercetools.sdk.jvm.core:commercetools-java-client:${commercetoolsJvmSdkVersion}"
    compile "com.google.code.findbugs:annotations:${findbugsVersion}"
    compile "com.commercetools:commercetools-sync-java:${commercetoolsSyncJava}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-simple:${slf4jVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
}

checkstyle {
    toolVersion = checkstyleVersion
    config = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml')
    maxWarnings = 0 // If warnings exceed this number, build should fail.
}

pmd {
    toolVersion = pmdVersion
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/pmd.xml')
    rulePriority = 2 // If a rule priority, with a level greater than or equal this number, is violated; the build should fail.
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0 // test coverage should be at a minimum of 80%, otherwise build would fail.
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
        html.enabled = true
        csv.enabled = false
    }
}

findbugs {
    toolVersion = findbugsVersion
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled =  true
        html.stylesheet = resources.text.fromFile('config/findbugs/findbugs-custom.xsl')
    }
}

check.dependsOn jacocoTestCoverageVerification // Build should fail if jacocoTestCoverageVerification task rules are not fulfilled.
test.finalizedBy jacocoTestReport